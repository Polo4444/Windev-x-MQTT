#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : COL_Com
 major_version : 26
 minor_version : 0
 type : 7
 description : ""
 subtype : 0
procedure_set :
 identifier : 0x150c613c0025cac9
 internal_properties : BgAAAAYAAABGLu41kG7fjQV3iS4F72qmnKaNh5694reolNKIW0iw
 code_elements :
  type_code : 31
  p_codes :
   -
     code : |1+
      
      // Constantes de topics
      constante
      	FORUM_TOPIC = "forum"
      	STATUS_TOPIC = "status"
      	STATUS_EXISTANTS_TOPIC = "status/existants"
      fin
      
      gSess			est une mqttSession
      
      // Liste de procédures à appelées lorsqu'un nouveau message est reçu
      // Syntaxe: PROCÉDURE Recevoir(sTopic est une chaîne, clMes est un CMessage)
      // La clé est le topic
      gtaMessageFuncs	est un tableau associatif de tableau associatif de procédures
      
      // Liste de procédures à appelées lorsque le status d'un utilisateur est reçu
      // Syntaxe: PROCÉDURE Recevoir(sTopic est une chaîne, clUtilisateur est un CUtilisateur)
      // La clé est le topic
      gtaStatusFuncs	est un tableau associatif de tableau associatif de procédures
      
     type : 720896
  procedures :
   -
     name : Connexion
     procedure_id : 1516694119205235897
     type_code : 15
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] Connexion ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	chaîne ANSI : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      procédure Connexion() : chaine
      
      
      gSess.Adresse				= "xa798c27.ala.us-east-1.emqxsl.com"
      gSess.Utilisateur			= "pcsoft"
      gSess.MotDePasseUtilisateur	= "astuces"
      gSess.Port					= 8883
      gSess.Option				= optionSSL
      gSess.IDClient				= DonneUUID()
      gSess.TimeoutConnexion		= 20s
      gSess.SessionVide			= Vrai
      
      SI PAS gSess.Connecte() ALORS
      	renvoyer ErreurInfo(errMessage)
      FIN
      
      renvoyer ""
     type : 458752
   -
     name : PublierSurForum
     procedure_id : 1516756108476951464
     type_code : 15
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] PublierSurForum (<bufData> est buffer)
      //
      // Paramètres :
      //	bufData (buffer) : <indiquez ici le rôle de bufData>
      // Valeur de retour :
      // 	chaîne ANSI : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      procédure PublierSurForum(bufData est un buffer) : chaine
      
      nRes est un entier = gSess.Publie(FORUM_TOPIC, bufData, faux, mqttQualitéExactementUneFois)
      si nRes = -1 ALORS
      	renvoyer "-1"
      FIN
      
      renvoyer ""
     type : 458752
   -
     name : Souscriptions
     procedure_id : 1517704725007585064
     type_code : 15
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] Souscriptions ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	booléen : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      procédure Souscriptions() : booléen
      
      gSess.DésabonneTout()
      
      // On s'abonne à la demande de status existants
      SI PAS gSess.Abonne(STATUS_EXISTANTS_TOPIC, mqttQualitéExactementUneFois, RecevoirDemandeStatus) ALORS
      	RENVOYER Faux
      FIN
      
      // On s'abonne aux status des utilisateurs
      SI PAS gSess.Abonne(STATUS_TOPIC, mqttQualitéExactementUneFois, RecevoirStatus) ALORS
      	RENVOYER Faux
      FIN
      
      // On s'abonne aux messages provenant du forum
      si pas gSess.Abonne(FORUM_TOPIC, mqttQualitéExactementUneFois, RecevoirDepuisForum) ALORS
      	renvoyer faux
      FIN
      
      
      renvoyer vrai
     type : 458752
   -
     name : RecevoirDepuisForum
     procedure_id : 1517704780842239073
     type_code : 15
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //RecevoirDepuisForum (<sess> est mqttSession, <sTopic> est chaîne, <body> est buffer)
      //
      // Paramètres :
      //	sess (mqttSession) : <indiquez ici le rôle de sess>
      //	sTopic (chaîne ANSI) : <indiquez ici le rôle de sTopic>
      //	body (buffer) : <indiquez ici le rôle de bufUnbuffer>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      procédure RecevoirDepuisForum(...
      	sess est un mqttSession <utile>,...
      	sTopic est une chaîne,...
      	bufBody est un Buffer...
      )
      
      // On analyse le message
      clMes est un CMessage
      sErr est une chaine = clMes.Analyser(bufBody)
      si sErr <> "" ALORS
      	retour // On interrompt le processus
      FIN
      
      // On vérifie si il existe au moins une fonction pour le topic
      si pas gtaMessageFuncs[sTopic]..Existe ALORS
      	RETOUR // On interrompt le processus
      FIN
      
      // On appelle chacune des fonctions ayant souscrit au topic:
      tabASupprimer est un tableau de chaines
      pour TOUT func, sClé DE gtaMessageFuncs[sTopic]
      	
      	// En cas d'erreur, on supprime la fonction de la liste des écoutes.
      	// On met ainsi en place ue stratégie de self-healing et on évite des crash de l'application.
      	QUAND EXCEPTION DANS
      		funcToRun est une procédure = func
      		funcToRun(sTopic, clMes)
      	FAIRE
      		tabASupprimer.Ajoute(sClé)
      	FIN
      FIN
      	
      // On Supprime les fonctions
      Pour tout sClé de tabASupprimer
      	
      	QUAND EXCEPTION DANS
      		gtaMessageFuncs[sTopic].Supprime(sClé)
      	FAIRE
      		
      	FIN
      FIN
      
      AfficherNotification(clMes)
      
      
     type : 458752
   -
     name : EcouterMessages
     procedure_id : 1517710351414939321
     type_code : 15
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //EcouterMessages (<sTopic> est chaîne, <func> est procédure)
      //
      // Paramètres :
      //	sTopic (chaîne ANSI) : <indiquez ici le rôle de sTopic>
      //	func (procédure) : <indiquez ici le rôle de func>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      procédure EcouterMessages(sTopic est une chaine, func est une procédure)
      
      si pas gtaMessageFuncs[sTopic]..Existe ALORS
      	
      	taFuncs est un tableau associatif de procédures
      	taFuncs[DonneGUID(guidBrut)] = func	// On génère un id aléatoire de fonctions
      	gtaMessageFuncs[sTopic] = taFuncs
      	retour
      FIN
      
      gtaMessageFuncs[sTopic][DonneGUID()] = func
     type : 458752
   -
     name : ArretSouscriptions
     procedure_id : 1517718752374040284
     type_code : 15
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      // ArretSouscriptions ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      procédure ArretSouscriptions()
      
      gSess.DésabonneTout()
     type : 458752
   -
     name : RecevoirStatus
     procedure_id : 1517764639806140036
     type_code : 15
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      // RecevoirStatus ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      procédure RecevoirStatus(...
      	sess	est un mqttSession	<utile>,...
      	sTopic	est une chaîne,...
      	bufBody	est un Buffer...
      )
      
      // On analyse l'utilisateur
      clUtilisateur	est un CUtilisateur
      sErr	est une chaine	= clUtilisateur.Analyser(bufBody)
      SI sErr <> "" ALORS
      	RETOUR // On interrompt le processus
      FIN
      
      // On vérifie si il existe au moins une fonction pour le topic
      SI PAS gtaStatusFuncs[sTopic]..Existe ALORS
      	RETOUR // On interrompt le processus
      FIN
      
      // On appelle chacune des fonctions ayant souscrit au topic:
      tabASupprimer est un tableau de chaines
      POUR TOUT func, sClé DE gtaStatusFuncs[sTopic]
      	
      	// En cas d'erreur, on supprime la fonction de la liste des écoutes.
      	// On met ainsi en place ue stratégie de self-healing et on évite des crash de l'application.
      	QUAND EXCEPTION DANS
      		funcToRun est une procédure = func
      		funcToRun(sTopic, clUtilisateur)
      	FAIRE
      		tabASupprimer.Ajoute(sClé)
      	FIN
      FIN
      
      // On Supprime les fonctions
      POUR TOUT sClé de tabASupprimer
      	
      	QUAND EXCEPTION DANS
      		gtaStatusFuncs[sTopic].Supprime(sClé)
      	FAIRE
      		
      	FIN
      FIN
      
      
     type : 458752
   -
     name : PublierStatus
     procedure_id : 1517766009900895201
     type_code : 15
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] PublierStatus ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	chaîne ANSI : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      procédure PublierStatus(bufData est un buffer) : chaine
      
      nRes est un entier = gSess.Publie(STATUS_TOPIC, bufData, faux, mqttQualitéExactementUneFois)
      SI nRes = -1 ALORS
      	RENVOYER "-1"
      FIN
      
      RENVOYER ""
     type : 458752
   -
     name : EcouterStatus
     procedure_id : 1517784478264830082
     type_code : 15
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      // EcouterStatus ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      procédure EcouterStatus(sTopic est une chaine, func est une procédure)
      
      SI PAS gtaStatusFuncs[sTopic]..Existe ALORS
      	
      	taFuncs est un tableau associatif de procédures
      	taFuncs[DonneGUID(guidBrut)]	= func	// On génère un id aléatoire de fonctions
      	gtaStatusFuncs[sTopic]			= taFuncs
      	RETOUR
      FIN
      
      gtaStatusFuncs[sTopic][DonneGUID()] = func
      
     type : 458752
   -
     name : RecevoirDemandeStatus
     procedure_id : 1517790684493035278
     type_code : 15
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //RecevoirDemandeStatus (<sess> est mqttSession, <sTopic> est chaîne, <bufBody> est buffer)
      //
      // Paramètres :
      //	sess (mqttSession) : <indiquez ici le rôle de sess>
      //	sTopic (chaîne ANSI) : <indiquez ici le rôle de sTopic>
      //	bufBody (buffer) : <indiquez ici le rôle de bufBody>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      procédure RecevoirDemandeStatus(...
      	sess	est un mqttSession	<utile>,...
      	sTopic	est une chaîne <utile>,...
      	bufBody	est un Buffer <utile>...
      )
      
      gclMyUser.PublierStatus()
      
     type : 458752
   -
     name : PublierDemandeStatusExistants
     procedure_id : 1517791165529418394
     type_code : 15
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      // PublierDemandeStatusExistants ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      procédure PublierDemandeStatusExistants()
      
      bufData est un buffer = "{}"
      nRes est un entier = gSess.Publie(STATUS_EXISTANTS_TOPIC, bufData, faux, mqttQualitéExactementUneFois)
      SI nRes = -1 ALORS
      	RENVOYER "-1"
      FIN
      
      RENVOYER ""
     type : 458752
   -
     name : AfficherNotification
     procedure_id : 1517811832912468412
     type_code : 15
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //AfficherNotification (<clMes> est CMessage)
      //
      // Paramètres :
      //	clMes (CMessage) : <indiquez ici le rôle de clMes>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      procédure AfficherNotification(clMes est un CMessage)
      
      SysIconeAfficheBulle(clMes.Message, clMes.Auteur.Nom)
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BgAAAAYAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : COL_SansNom1
resources :
 string_res :
  identifier : 0x150c613000239c57
  internal_properties : BgAAAAYAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BgAAAAYAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
